#!/bin/sh
PYTHON_PATH=$(/var/packages/TvShowWatch/scripts/bashconstant.py "python_path" < /var/packages/TvShowWatch/target/directory.json )
TSW_PATH=$(/var/packages/TvShowWatch/scripts/bashconstant.py "tsw_path" < /var/packages/TvShowWatch/target/directory.json )
PID_FILE=$(/var/packages/TvShowWatch/scripts/bashconstant.py "tmp_path" < /var/packages/TvShowWatch/target/directory.json )/TSW.pid
ETC_PATH=$(/var/packages/TvShowWatch/scripts/bashconstant.py "etc_path" < /var/packages/TvShowWatch/target/directory.json )
ARCH=$(/var/packages/TvShowWatch/scripts/bashconstant.py "arch" < /var/packages/TvShowWatch/target/directory.json )

DNAME="TvShowWatch"
PATH=$PYTHON_PATH:$PATH
CRONFILE=/etc/crontab
TMPFILE=/tmp/crontab
LogFile=/var/log/TSW.log
SERVER="${TSW_PATH}/server.py"
MINUTE="21"
CRONLINE="\t*\t*\t*\t*\troot\t$PYTHON_PATH/python ${TSW_PATH}/tvShowWatch.py -s\"${ETC_PATH}/series.xml\" -c\"${ETC_PATH}/config.xml\""
CRONLINE="${CRONLINE} --action run>>$LogFile"
CRON_SED_LINE='/^[0-9]\{1,2\}'$(echo $CRONLINE | sed -e 's/[]/()$*.^|[]/\\&/g')'$/'

start_daemon ()
{
    PATH=${PATH} ${PYTHON_PATH}/python ${SERVER}
}                                   
                  
stop_daemon ()
{                                       
    kill `cat ${PID_FILE}`
    wait_for_status 1 20 || kill -9 `cat ${PID_FILE}`
    rm -f ${PID_FILE}
}       
                        
daemon_status ()
{     
    if [ -f ${PID_FILE} ] && kill -0 `cat ${PID_FILE}` > /dev/null 2>&1; then
        return
    fi
    rm -f ${PID_FILE}
    return 1
}
 
wait_for_status ()
{
    counter=$2
    while [ ${counter} -gt 0 ]; do
        daemon_status
        [ $? -eq $1 ] && return
        let counter=counter-1
        sleep 1
    done
    return 1
}

ValidateConfFile() {
        retval=""
        if [ -e "${ETC_PATH}/config.xml" ]; then
                retval="1"                
        else          
                retval="0"
        fi                
        echo "$retval"                                                                                                                          
} 

RestartCron() {                            
		if [ $(id -u) -ne 0 ]; then
				echo "Only root can manage crontab"
		else
			if [ $ARCH = "syno" ]; then
				if [[ `grep majorversion /etc.defaults/VERSION` = 'majorversion="5"' ]] ; then
				        /usr/syno/sbin/synoservicectl --restart crond
				else
				        sleep 1
				        /usr/syno/etc/rc.d/S04crond.sh stop
				        sleep 1                                           
				        /usr/syno/etc/rc.d/S04crond.sh start
				fi  
			else
				echo "Root linux user not managed for crontab action"
			fi
		fi
}     

StartPackage () {
        # Don't start if already started
        if [ $ARCH = "syno" ]; then
		    if [ -e "/var/packages/tvShowWatch/enabled" ]; then
		            exit 0
		    fi

		    # Check configuration file
		    retval=$( ValidateConfFile )
		    if [[ "$retval" == "0" ]]; then
		            echo "Configuration file unfoundable"
		            echo "Configuration file unfoundable" >> $LogFile
		            exit 1
		    fi

		    # Log
		    echo `date`" : Starting TvShowWatch..." >> $LogFile

		    # Start Package
		    echo "Starting TvShowWatch..."
		    echo -e ${MINUTE}$CRONLINE >>$CRONFILE
		    RestartCron
		fi
}

StopPackage () {
        if [ $ARCH = "syno" ]; then
		    sed "${CRON_SED_LINE}d" $CRONFILE > $TMPFILE
		    mv $TMPFILE $CRONFILE
		    RestartCron
		fi
}
                                                                                                                                                                             

                 
case $1 in                              
    validate)                                          
		retval=$( ValidateConfFile )
		if [[ "$retval" == "1" ]]; then
		        echo "Conf File validated"
		else              
		        echo "Conf File not validated"
		fi                     
		;;                                   
    start) 
		if daemon_status; then
		    echo ${DNAME} is already running
		    exit 0
		else
		    echo Starting ${DNAME} ...                                         
        	StartPackage
		    start_daemon
		    exit $?
		fi
		;;
    stop)                     
		if daemon_status; then                                            
		    echo Stopping ${DNAME} ...
        	StopPackage
		    stop_daemon               
		    exit $?                        
		else                               
		    echo ${DNAME} is not running   
		    exit 0
		fi
		;;                                         
    restart)
        StopPackage
        sleep 1               
        StartPackage                                              
        ;;                   
    status)
		if daemon_status; then                         
		    echo ${DNAME} is running
		    exit 0
		else  
		    echo ${DNAME} is not running
		    exit 1        
		fi                                           
		;;            
    log)                                                           
        echo $LogFile                                             
        exit 0
        ;;                                  
    *)                   
        echo "Usage: $0 {start|stop|restart|status|log}" >&2
        exit 1                     
        ;;
esac                                        
 



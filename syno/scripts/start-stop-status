#!/usr/bin/env python
#encoding:utf-8

import sys
import os
import signal
import time
import datetime
import json
import subprocess
import crontab
import getpass
import re
import shutil

if 'SYNOPKG_PKGNAME' in os.environ.keys(): # Synology
	ARCH='syno'
	DNAME=os.environ['SYNOPKG_PKGNAME']
	tsw_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))	+ os.sep + 'target'
	enable_file = tsw_path + os.sep + '..' + os.sep + 'enabled'
else:
	ARCH='linux'
	DNAME="TvShowWatch"
	tsw_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
	
isRoot = (getpass.getuser() == 'root')

directories_file = tsw_path + os.sep + 'directory.json'
if not os.path.isfile(directories_file):
	sys.exit("directory.json not found: " + directories_file)
	
with open(tsw_path + os.sep + 'directory.json') as data_file:    
	directories = json.load(data_file)
	
tmp_path = directories['tmp_path']
pid_file = tmp_path + os.sep + 'TSW.pid'
python_cmd = directories['python_path']+os.sep+directories['python_exec']
etc_path = directories['etc_path']
etc_file = etc_path + os.sep + 'config.json'
series_file = etc_path + os.sep + 'series.json'
log_file = tmp_path + os.sep + 'TSW.log'
tsw_exe = tsw_path + os.sep + 'tvShowWatch.py'

CMD='%s %s -s"%s" -c"%s" --action run >> %s' %(python_cmd,tsw_exe,series_file,etc_file,log_file)
now = datetime.datetime.now()
minute = (now.minute +2) % 60
CRONLINE="\t%s\t%s\t%s\t%s\t%s\t%s #%s" % ('*','*','*','*','root',CMD,DNAME)
SED_CRONLINE = re.escape(CRONLINE)

def daemon_status():
	if os.path.isfile(pid_file):
		pid = open(pid_file,'r').read()
		try:
			os.kill(int(pid), 0)
			return True
		except:
			os.remove(pid_file)
	return False

def startDaemon():
	subprocess.call([python_cmd,tsw_path+os.sep+'server.py'])
	
def stopDaemon():
	if os.path.isfile(pid_file):
		pid = open(pid_file,'r').read()
		try:
			os.kill(int(pid), 15)
			if not wait_for_status(False,20):
				os.kill(int(pid), 9)
			os.remove(pid_file)
		except:
			pass
	
def wait_for_status(status,retry):
	while retry > 0:
		if not daemon_status():
			return True
		retry -= 1
		time.sleep(1)
	return False

def startPackage():
	if ARCH == 'syno':
		if os.path.isfile(enable_file):
			print "%s is not running" % (DNAME)
			sys.exit(3)
		else:
			print "Starting %s..." %(DNAME)
			open('/etc/crontab', 'a').write(str(minute)+CRONLINE+"\n")
			# Cron restart already managed by INFO (startstop_restart_services)
			#subprocess.call(['/usr/syno/sbin/synoservicectl','--restart','crond'])
	else:
		# Schedule task starting from next 2 minutes
		c=crontab.CronTab(user=(not isRoot))
		c.remove_all(comment=DNAME)
		job = c.new(command=CMD,comment=DNAME)
		job.minute.on(minute)
		c.write() if isRoot else c.write_to_user(user=True)
		print "First run will be launched at " + str(now.hour) + ':' + str(minute)

def stopPackage():
	if ARCH == 'syno':
		with open('/etc/crontab','r') as myFile:         
			cron_file_content = myFile.read()                                            
		myFile.close()
		new_cron_file_content = re.sub('\n[0-9]{1,2}'+SED_CRONLINE,'',cron_file_content)
		with open('/etc/crontab','w') as data_file:
			data_file.write(new_cron_file_content)
		# Cron restart already managed by INFO (startstop_restart_services)
		#subprocess.call(['/usr/syno/sbin/synoservicectl','--restart','crond'])
	else:
		# Unschedule task
		c=crontab.CronTab(user=(not isRoot))
		c.remove_all(comment=DNAME)
		c.write() if isRoot else c.write_to_user(user=True)

if sys.argv[1] == 'start':
	if daemon_status():
		print "%s is already running" % (DNAME)
		sys.exit()
	else:
		print "Starting %s" % (DNAME)
		startPackage()
		startDaemon()
		sys.exit()
elif sys.argv[1] == 'stop':
	if daemon_status():
		print "Stopping %s" % (DNAME)
		stopPackage()
		stopDaemon()
		sys.exit()
	else:
		print "%s is not running" % (DNAME)
		sys.exit()
elif sys.argv[1] == 'status':
	if daemon_status():
		print "%s is running" % (DNAME)
		sys.exit()
	else:
		sys.exit("%s is not running" % (DNAME))
